!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BRANCH	include/huffman_tree.h	/^    BRANCH$/;"	e	enum:node_type	access:public
LEAF	include/huffman_tree.h	/^    LEAF,$/;"	e	enum:node_type	access:public
_e	src/main.cpp	/^typedef struct _e$/;"	s	file:
_e::ch	src/main.cpp	/^    char ch;$/;"	m	struct:_e	typeref:typename:char	file:	access:public
_e::count	src/main.cpp	/^    int count;$/;"	m	struct:_e	typeref:typename:int	file:	access:public
_e::next	src/main.cpp	/^    struct _e * next;$/;"	m	struct:_e	typeref:struct:_e *	file:	access:public
_htree	include/encoder.h	/^    huffman_tree _htree;$/;"	v	typeref:typename:huffman_tree
_len	include/vector.h	/^    size_t _len;$/;"	v	typeref:typename:size_t
_m_e	map.h	/^    struct _m_e$/;"	s
_m_e::next	map.h	/^        struct _m_e * next;$/;"	m	struct:_m_e	typeref:struct:_m_e *	access:public
_m_e::r	map.h	/^        R & r;$/;"	m	struct:_m_e	typeref:typename:R &	access:public
_m_e::t	map.h	/^        T & t;$/;"	m	struct:_m_e	typeref:typename:T &	access:public
_node	include/huffman_tree.h	/^typedef struct _node$/;"	s
_node::weight	include/huffman_tree.h	/^    float weight;$/;"	m	struct:_node	typeref:typename:float	access:public
_size	include/vector.h	/^    size_t _size;$/;"	v	typeref:typename:size_t
ch	src/main.cpp	/^    char ch;$/;"	m	struct:_e	typeref:typename:char	file:	access:public
count	src/main.cpp	/^    int count;$/;"	m	struct:_e	typeref:typename:int	file:	access:public
e	src/main.cpp	/^}e;$/;"	t	typeref:struct:_e	file:
encode	include/encoder.h	/^    const char * encode(char * raw);$/;"	p	typeref:typename:const char *	signature:(char * raw)
encode	src/encoder.cpp	/^const char * encoder::encode(char * raw)$/;"	f	class:encoder	typeref:typename:const char *	signature:(char * raw)
encoder	encode.cpp	/^class encoder$/;"	c	file:
encoder	include/encoder.h	/^    encoder();$/;"	p	typeref:typename:public:	signature:()
encoder	src/encoder.cpp	/^encoder::encoder()$/;"	f	class:encoder	signature:()
encoder::encode	src/encoder.cpp	/^const char * encoder::encode(char * raw)$/;"	f	class:encoder	typeref:typename:const char *	signature:(char * raw)
encoder::encoder	src/encoder.cpp	/^encoder::encoder()$/;"	f	class:encoder	signature:()
encoder::~encoder	src/encoder.cpp	/^encoder::~encoder()$/;"	f	class:encoder	signature:()
features	CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
features	CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v	typeref:typename:const char[]
info_arch	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_arch	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_cray	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	typeref:typename:const char *
info_language_dialect_default	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	typeref:typename:const char *
info_platform	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_platform	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_simulate_version	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
maim	encode.cpp	/^int maim (int argc, char *argv[])$/;"	f	typeref:class:encoder int	signature:(int argc,char * argv[])
main	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f	signature:(argc,argv)
main	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void	signature:()
main	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
main	CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
main	map.cpp	/^int main ()$/;"	f	typeref:typename:int	signature:()
main	src/main.cpp	/^int main (int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
ncy	map.cpp	/^namespace ncy$/;"	n	file:
next	map.h	/^        struct _m_e * next;$/;"	m	struct:_m_e	typeref:struct:_m_e *	access:public
next	src/main.cpp	/^    struct _e * next;$/;"	m	struct:_e	typeref:struct:_e *	file:	access:public
node	include/huffman_tree.h	/^}node;$/;"	t	typeref:struct:_node
node_type	include/huffman_tree.h	/^enum node_type$/;"	g
push_back	include/vector.h	/^    push_back(_t);$/;"	p	signature:(_t)
push_back	include/vector.h	/^    void push_back (const T & _t);$/;"	p	typeref:typename:void	signature:(const T & _t)
push_back	include/vector.h	/^void vector<T>::push_back(const T&_t)$/;"	f	typeref:typename:template<typename T> void vector<T>::	signature:(const T & _t)
qnxnto	CMakeFiles/3.9.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
qnxnto	CMakeFiles/3.9.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
r	map.h	/^        R & r;$/;"	m	struct:_m_e	typeref:typename:R &	access:public
t	map.h	/^        T & t;$/;"	m	struct:_m_e	typeref:typename:T &	access:public
value	include/vector.h	/^    const T * value()const ;$/;"	p	typeref:typename:const T *	signature:()
value	include/vector.h	/^const T *vector<T>::value() const$/;"	f	typeref:typename:template<typename T> const T * vector<T>::	signature:()
vector	include/vector.h	/^    vector();$/;"	p	typeref:typename:public:	signature:()
vector	include/vector.h	/^vector<T>::vector()$/;"	f	typeref:typename:template<typename T> vector<T>::	signature:()
weight	include/huffman_tree.h	/^    float weight;$/;"	m	struct:_node	typeref:typename:float	access:public
~encoder	include/encoder.h	/^    ~encoder();$/;"	p	signature:()
~encoder	src/encoder.cpp	/^encoder::~encoder()$/;"	f	class:encoder	signature:()
~vector	include/vector.h	/^    ~vector();$/;"	p	signature:()
~vector	include/vector.h	/^vector<T>::~vector()$/;"	f	typeref:typename:template<typename T> vector<T>::	signature:()
